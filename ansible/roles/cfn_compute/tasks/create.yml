---
- name: get facts about the {{ network_stack_name }} stack
  amazon.aws.cloudformation_info:
    stack_name: '{{ network_stack_name }}'
  register: network_stack_facts
  failed_when: cloudformation[network_stack_name] is undefined

- name: update stack template on s3 bucket
  amazon.aws.aws_s3:
    bucket: '{{ bucket_name }}'
    object: '{{ object_path }}'
    src: '{{ file_path }}'
    mode: put

- name: create the {{ stack_name }} stack, pass in the template via an url
  vars:
    network_output: '{{ network_stack_facts.ansible_facts.cloudformation[network_stack_name].stack_outputs }}'
  cloudformation:
    stack_name: '{{ stack_name }}'
    state: present
    region: "{{ lookup('env','AWS_REGION') }}"
    disable_rollback: false
    template_url: 'https://s3.amazonaws.com/{{ bucket_name }}{{ object_path }}'
    template_parameters:
      VpcId: '{{ network_output.VPC }}'
      Subnets: '{{ network_output.PublicSubnets }}'
      InstanceType: "{{  lookup('env','INSTANCE_TYPE') }}"
      KeyName: "{{  lookup('env','KEY_NAME') }}"
      SSHLocation: "{{ lookup('env','SSH_LOCATION') }}"
      TagName: "{{  lookup('env','TAG_NAME') }}"
      TagGroup: "{{  lookup('env','TAG_GROUP') }}"
      TagEnv: "{{ lookup('env','TAG_ENVIRONMENT') }}"
    tags:
      Stack: '{{ stack_name }}'
